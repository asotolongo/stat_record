stat_record  extension
======================================

This PostgreSQL extension implements  record stats about database server and can show some reports about stats like : connection, size, cache, table and index use, querys, etc  
#required PG10+, file_fdw, pg_stat_statements extensions and linux SO



IMPORTANT: There're bugs in the existing version, please contact to me.


Building and install
--------
Run: make install 
--if not install,  you must make sure you can see the binary pg_config,
maybe setting postgresql binary path in the SO  or setting PG_CONFIG = /path_to_pg_config/  in the makefile 

In postgresql execute: CREATE EXTENSION stats_record CASCADE;

--It create schema stat_record and tables/functions

--Tables
_stat_record._record_number ----table where store information about the record taked

--Functions:
select _stat_record.take_record()  ---- take stats record 
select _stat_record.truncate_record( boolean) ---- truncate all record taked (boolean = true, reset id_record to 1)
select _stat_record.delete_record(bigint) ---- delete a record with id_record parameter
select * from _stat_record.lastest_records(bigint) ---- get the lastes record (if a number (N) is specified, it shows the last N records)
select * from _stat_record.global_report_record(bigint,bigint) ----get report with global stats about id_record specified
select * from _stat_record.total_report_record(bigint,bigint) ----get report with all stats about id_records specified
select * from _stat_record.total_report_for_2last_record() ----get report with all stats about two last record taked
select * from _stat_record.total_report_for_amonth_record(date) ----get report with all stats about first and the last record taked a moth specified
select _stat_record.export_total_report_record(bigint,bigint,text) ----export CSV report with all stats about first and the last record taked a moth specified y some path(by default /tmp/global_report.csv)



--Example of use:

select _stat_record.take_record()--taken a record
stat_record=# select _stat_record.take_record();
NOTICE:  record taked
 take_record 
-------------
 t
(1 fila)

--wait a time and take the record again 
select _stat_record.take_record();
NOTICE:  record taked
 take_record 
-------------
 t
(1 fila)


--wait a time and take the record again 
select _stat_record.take_record();
NOTICE:  record taked
 take_record 
-------------
 t
(1 fila)


--getting the last tree records
stat_record=# select * from _stat_record.lastest_records(3);
 id |        record_time         | record_description 
----+----------------------------+--------------------
  3 | 2019-03-26 09:31:28.356064 | 
  2 | 2019-03-26 09:26:54.164399 | 
  1 | 2019-03-26 09:25:40.781224 | 
(3 filas)







--get global report about 1 and 2 records
stat_record=# select * from _stat_record.global_report_record(1,2);
                                                                     global_report_record                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Global report from database server, generate by stat_record extension 
 Record id 1, taked: 2019-03-26 09:25:40.781224 :->
   Server reload: 2019-03-20 12:39:56.68537-03
   Server start: 2019-03-20 12:39:57.391369-03
   Version server: PostgreSQL 10.7 (Ubuntu 10.7-1.pgdg16.04+1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609, 64-bit
   Users:14
   Databases: 38
   Tablespaces: 2
   Tablespaces Names/size: 
     pg_default: 31541.00 MB
     pg_global: 0.00 MB
   Partitions Disc:->
     S.ficheros  Tamaño  Usados  Disp    Uso%    Montado
     udev        7.8G    0       7.8G    0%      /dev
     tmpfs       1.6G    26M     1.6G    2%      /run
     /dev/sda2   202G    75G     117G    39%     /
     tmpfs       7.8G    138M    7.7G    2%      /dev/shm
     tmpfs       5.0M    4.0K    5.0M    1%      /run/lock
     tmpfs       7.8G    0       7.8G    0%      /sys/fs/cgroup
     /dev/sda1   380M    1.2M    379M    1%      /boot/efi
     /dev/sda3   230G    143G    76G     66%     /home
     tmpfs       1.6G    100K    1.6G    1%      /run/user/1000
 Record id 2, taked: 2019-03-26 09:26:54.164399 :->
   Server reload: 2019-03-20 12:39:56.68537-03
   Server start: 2019-03-20 12:39:57.391369-03
   Version server: PostgreSQL 10.7 (Ubuntu 10.7-1.pgdg16.04+1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609, 64-bit
   Users: 14
   Databases: 38
   Tablespaces: 2
   Tablespaces Names/size: 
     pg_default: 31542.00 MB
     pg_global: 0.00 MB
   Partitions Disc:->
     S.ficheros  Tamaño  Usados  Disp    Uso%    Montado
     udev        7.8G    0       7.8G    0%      /dev
     tmpfs       1.6G    26M     1.6G    2%      /run
     /dev/sda2   202G    75G     117G    39%     /
     tmpfs       7.8G    138M    7.7G    2%      /dev/shm
     tmpfs       5.0M    4.0K    5.0M    1%      /run/lock
     tmpfs       7.8G    0       7.8G    0%      /sys/fs/cgroup
     /dev/sda1   380M    1.2M    379M    1%      /boot/efi
     /dev/sda3   230G    143G    76G     66%     /home
     tmpfs       1.6G    100K    1.6G    1%      /run/user/1000
 Configuration Differences:->
 Databases Differences:->
     Databases commit: 113 
     Databases rollback: 0 
     Databases tuples returned: 196165 
     Databases tuples fetched: 5864 
     Databases tuples inserted: 3414 
     Databases tuples updated: 21 
     Databases tuples deleted: 8 
     Databases tuples tempfiles: 0 
     Databases active connections: 0 
     Databases connections: 0 
     Databases chache ratio: 0.00 %
     Databases sizes: 1.39 MB
     Databases count: 0 
(58 filas)

--get the total reports about 1 and 3 records and some different
stat_record=#select * from _stat_record.total_report_record(1,3);

--get the total reports about 1 and 3 records and some different and export to some file csv
stat_record=#select _stat_record.export_total_report_record(1,3,'/tmp/reporte.csv')

--get the total reports about last tow records taked and some different
stat_record=#select * from select * from _stat_record.total_report_for_2last_record()


--get the total reports about fisrt and the last records taked in the month 
stat_record=#select * from _stat_record.total_report_for_amonth_record('2019-03-01') --get report in march 2019


--delete some record by id
stat_record=# select _stat_record.delete_record(1);
NOTICE:  record deleted
 delete_record 
---------------
 t
(1 fila)

stat_record=# select * from _stat_record.lastest_records(3);
 id |        record_time         | record_description 
----+----------------------------+--------------------
  3 | 2019-03-26 09:31:28.356064 | 
  2 | 2019-03-26 09:26:54.164399 | 
(2 filas)



--delete all records and restart the id from 1, if parameters if false do nor restart de id from 1
select _stat_record.truncate_record( true);
NOTICE:  truncando además la tabla «_global_stat»
NOTICE:  truncando además la tabla «_db_stat»
NOTICE:  truncando además la tabla «_global_object»
NOTICE:  truncando además la tabla «_query_stat»
NOTICE:  truncando además la tabla «_so_partitions»
 truncate_record 
-----------------
 t
(1 fila)





Anthony R. Sotolongo leon
asotolongo@gmail.com

